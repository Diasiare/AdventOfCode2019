#include "Day19.h"

#include "Computer.h"
#include <set>
#include <map>
#include <utility>
#include <vector>
#include <iostream>

namespace day19 {


	class TractorBeamScanner : public computer::IODriver {
	public:
		int i = 0;
		bool x_next = true;
		std::map<int ,std::map<int, NUM_TYPE>> scan_results;

		NUM_TYPE Read() override {
			int out;
			if (x_next) out = i % 50;
			else {
				out = i / 50;
			}
			x_next = !x_next;
			return out;
		}

		void Write(NUM_TYPE v) override {
			scan_results[i / 50][i % 50] = v;
			i++;
		}

		bool Stop() override {
			return i >= 50 * 50;
		}
	};


	int Day19::Part1() {
		std::vector<NUM_TYPE> input = {
			109,424,203,1,21102,1,11,0,1105,1,282,21101,18,0,0,1106,0,259,2101,0,1,221,203,1,21102,1,31,0,1106,0,282,21101,0,38,0,1106,0,259,21002,23,1,2,22102,1,1,3,21101,0,1,1,21102,57,1,0,1106,0,303,2102,1,1,222,21002,221,1,3,21002,221,1,2,21101,0,259,1,21101,0,80,0,1105,1,225,21101,123,0,2,21101,91,0,0,1105,1,303,1201,1,0,223,20101,0,222,4,21101,259,0,3,21102,225,1,2,21101,0,225,1,21102,118,1,0,1105,1,225,21001,222,0,3,21102,58,1,2,21101,133,0,0,1105,1,303,21202,1,-1,1,22001,223,1,1,21102,1,148,0,1106,0,259,1201,1,0,223,20101,0,221,4,21002,222,1,3,21101,20,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,105,1,109,20207,1,223,2,20102,1,23,1,21101,-1,0,3,21102,214,1,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,22102,1,-3,1,22102,1,-2,2,22101,0,-1,3,21101,250,0,0,1105,1,225,21202,1,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21201,-2,0,-2,109,-3,2106,0,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21102,1,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,21201,-4,0,1,21102,1,384,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21201,1,0,-4,109,-5,2105,1,0
		};
		std::shared_ptr<TractorBeamScanner> scanner = std::make_shared<TractorBeamScanner>();

		while (!scanner->Stop()) {
			computer::Computer c(input, scanner);
			c.Run();
		}

		int accum = 0;
		for (auto row : scanner->scan_results) {
			for (auto point : row.second) {
				accum += point.second;
			}
		}
		return accum;
	}

	class TractorBeamChecker : public computer::IODriver {
	public:
		int x;
		int y;
		bool x_next = true;
		bool out = false;
		TractorBeamChecker(int x, int y) : x(x), y(y) {};

		NUM_TYPE Read() override {
			if (x_next) {
				x_next = false;
				return x;
			}
			x_next = true;
			return y;
		}

		void Write(NUM_TYPE v) {
			out = v == 1;
		}
	};

	bool CheckPoint(int x, int y, std::unordered_map<int, std::unordered_map<int, bool>> & cache) {
		auto it = cache[x].find(y);
		if (it != cache[x].end()) return it->second;

		std::vector<NUM_TYPE> input = {
109,424,203,1,21102,1,11,0,1105,1,282,21101,18,0,0,1106,0,259,2101,0,1,221,203,1,21102,1,31,0,1106,0,282,21101,0,38,0,1106,0,259,21002,23,1,2,22102,1,1,3,21101,0,1,1,21102,57,1,0,1106,0,303,2102,1,1,222,21002,221,1,3,21002,221,1,2,21101,0,259,1,21101,0,80,0,1105,1,225,21101,123,0,2,21101,91,0,0,1105,1,303,1201,1,0,223,20101,0,222,4,21101,259,0,3,21102,225,1,2,21101,0,225,1,21102,118,1,0,1105,1,225,21001,222,0,3,21102,58,1,2,21101,133,0,0,1105,1,303,21202,1,-1,1,22001,223,1,1,21102,1,148,0,1106,0,259,1201,1,0,223,20101,0,221,4,21002,222,1,3,21101,20,0,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,105,1,109,20207,1,223,2,20102,1,23,1,21101,-1,0,3,21102,214,1,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,22102,1,-3,1,22102,1,-2,2,22101,0,-1,3,21101,250,0,0,1105,1,225,21202,1,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,21201,-2,0,-2,109,-3,2106,0,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21102,1,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,21201,-4,0,1,21102,1,384,0,1106,0,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21201,1,0,-4,109,-5,2105,1,0
		};
		std::shared_ptr<TractorBeamChecker> scanner = std::make_shared<TractorBeamChecker>(x,y);

		computer::Computer c(input, scanner);
		c.Run();
		cache[x][y] = scanner->out;

		return scanner->out;
	}

	int Day19::Part2() {
		int x_base = 10;
		int y_min = 0;

		std::unordered_map<int, std::unordered_map<int, bool>> cache;
		
		while (true) {
			std::cout << x_base << std::endl;
			int s_y_min = y_min;
			bool found_1 = false;
			for (int y = y_min; y <= x_base; y++) {
				int x = x_base - y;
				bool p1 = CheckPoint(x, y, cache);
				if (!found_1 && !p1) {
					y_min = y;
					continue;
				}
				else if (found_1 && !p1) break;

				found_1 = true;

				if (CheckPoint(x,y + 99, cache) && CheckPoint(x + 99, y, cache)) return x * 10000 + y;
			}
			//If there are no hits reset
			if (!found_1) y_min = s_y_min;
			x_base++;
		}
	}
}