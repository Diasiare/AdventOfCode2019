#include "Day17.h"

#include "Computer.h"
#include <vector>
#include <string>
#include <memory>
#include <iostream>
#include <vector>
#include <utility>
#include <array>
#include <set>

namespace day17 {

	class Part1IODriver : public computer::IODriver {
	public:
		std::string stringMap = "";

		NUM_TYPE Read() {
			return 0;
		}

		void Write(NUM_TYPE value) {
			char c = value;
			stringMap += c;
		}
	};

	std::vector<std::vector<int>> ToMap(std::string& s) {
		std::vector<std::vector<int>> out;
		std::vector<int> crow;

		for (char c : s) {
			if (c == '#') {
				crow.push_back(1);
			}
			else if (c == '\n' && !crow.empty()) {
				out.push_back(crow);
				crow.clear();
			}
			else if (c != '\r') {
				crow.push_back(0);
			}
		}

		return out;
	}

	int Day17::Part1() {
		std::vector<NUM_TYPE> code = {
			1,330,331,332,109,3264,1102,1,1182,16,1101,1431,0,24,101,0,0,570,1006,570,36,1001,571,0,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1431,570,1006,570,14,21102,1,58,0,1105,1,786,1006,332,62,99,21102,1,333,1,21101,0,73,0,1105,1,579,1101,0,0,572,1102,0,1,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,101,0,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21102,340,1,1,1106,0,177,21102,477,1,1,1105,1,177,21101,514,0,1,21101,176,0,0,1105,1,579,99,21101,0,184,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1001,572,0,1182,21101,375,0,1,21102,1,211,0,1105,1,579,21101,1182,11,1,21101,0,222,0,1105,1,979,21101,0,388,1,21101,233,0,0,1105,1,579,21101,1182,22,1,21102,244,1,0,1105,1,979,21102,1,401,1,21101,0,255,0,1105,1,579,21101,1182,33,1,21101,0,266,0,1106,0,979,21101,0,414,1,21101,0,277,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21102,1,1182,1,21102,313,1,0,1105,1,622,1005,575,327,1102,1,1,575,21102,327,1,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,6,14,0,109,4,1201,-3,0,586,21002,0,1,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2105,1,0,109,5,2101,0,-4,630,20101,0,0,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21001,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,702,0,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,1,756,0,1106,0,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1105,1,622,21201,-3,1,-3,1106,0,640,109,-5,2105,1,0,109,7,1005,575,802,21001,576,0,-6,20101,0,577,-5,1105,1,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,47,-3,22201,-6,-3,-3,22101,1431,-3,-3,2101,0,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1105,1,924,1205,-2,873,21101,0,35,-4,1106,0,924,1202,-3,1,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1101,2,0,0,1202,-3,1,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,47,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,39,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21102,973,1,0,1105,1,786,99,109,-7,2105,1,0,109,6,21102,1,0,-4,21102,1,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21101,0,-4,-2,1105,1,1041,21102,-5,1,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1201,-2,0,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1202,-2,1,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21102,439,1,1,1106,0,1150,21102,477,1,1,1106,0,1150,21101,514,0,1,21101,0,1149,0,1105,1,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,2101,0,-4,0,109,-6,2106,0,0,28,7,40,1,5,1,40,1,5,1,40,1,5,1,22,1,5,13,5,1,22,1,5,1,17,1,22,1,3,5,15,1,22,1,3,1,1,1,1,1,15,1,22,1,1,9,13,1,22,1,1,1,1,1,1,1,1,1,1,1,13,1,16,7,1,1,1,9,11,1,16,1,7,1,3,1,1,1,1,1,1,1,11,1,12,13,3,5,1,1,11,5,8,1,3,1,13,1,3,1,15,1,8,1,3,1,1,13,3,1,15,1,8,1,3,1,17,1,15,1,8,1,3,1,17,7,5,9,4,1,3,1,23,1,5,1,3,1,3,1,4,5,23,1,5,1,3,1,3,1,32,1,5,1,3,1,3,1,32,1,5,5,3,1,32,1,13,1,32,1,13,1,32,1,13,1,32,1,3,5,5,1,32,1,3,1,3,1,5,1,32,1,3,1,3,1,5,1,32,1,3,1,3,1,5,1,32,9,5,5,32,1,13,1,32,1,13,1,32,1,13,1,26,7,13,1,26,1,19,1,26,1,7,13,26,1,7,1,38,1,7,1,38,1,7,1,38,9,12
		};
		std::shared_ptr<Part1IODriver> driver = std::make_shared<Part1IODriver>();

		computer::Computer computer(code, driver);
		computer.Run();

		auto map = ToMap(driver->stringMap);


		int accum = 0;
		for (size_t i = 1; i < map.size() - 1; i++)
		{
			for (size_t i2 = 1; i2 < map[i].size() - 1; i2++)
			{
				int count = map[i][i2] + map[i + 1][i2] + map[i - 1][i2] + map[i][i2 + 1] + map[i][i2 - 1];
				if (count == 5) {
					accum += i * i2;
				}
				
			}
		}

		return accum;
	}
	
	bool PositionUpdated(std::set<std::pair<int, int>> & visited, std::vector<std::vector<int>> & map, std::pair<int, int> & position) {
		visited.emplace(position);
		if (position.second < 0 || position.second >= map.size()) return false;
		if (position.first < 0 || position.first >= map[0].size()) return false;

		return map[position.second][position.first] == 1;
	}

	class Move {
	public:
		int distance = 0;
		int turn = 0;

		bool Next() {
			if (distance == 0 && turn == 0) {
				turn++;
				return false;
			}
			
			if (turn > 0) {
				turn = (turn + 1) % 3;
				if (turn == 0) distance++;
				return false;
			}
			distance = (distance + 1) % 13;
			if (distance == 0) {
				turn++;
				return true;
			}
			return false;
		}

		// facing: north, east, south, west
		bool Do(int& facing, std::pair<int, int>& position, std::set<std::pair<int, int>>& visited, std::vector<std::vector<int>>& map) {
			if (turn > 0) {
				facing = (facing + (turn == 1 ? 1 : -1)) % 4;
			}
			else if (distance > 0){
				for (size_t i = 0; i < distance; i++)
				{

					switch (facing) {
						// North
					case 0: position.second -= 1;
						break;

						// East
					case 1: position.first += 1;
						break;

						// South
					case 2: position.second += 1;
						break;
						// West
					case 3: position.first -= 1;
						break;
					}
				}
				bool valid = PositionUpdated(visited, map, position);
				if (!valid) return false;
			}
			return true;
		}

		bool IsMove() {
			return distance > 0;
		}

		std::string ToString() {
			if (turn == 1) return "R";
			if (turn == 2) return "L";
			if (distance > 0) return std::to_string(distance);
		}


	};

	class MoveFunction {
	public:
		std::vector<Move> moves;
		char name;
		
		MoveFunction(char name,  int moveCount) {
			this->name = name;
			moves = std::vector<Move>();
			for (size_t i = 0; i < moveCount; i++)
			{
				moves.push_back(Move());
			}
		}

		bool Next() {
			bool over = false;
			int index = 0;
			do {
				over = moves[index].Next();
				index++;
			} while (over && index < moves.size());
			return over;
		}

		bool Do(int& facing, std::pair<int, int>& position, std::set<std::pair<int, int>>& visited, std::vector<std::vector<int>>& map) {
			if (ToString().size() > 20) return false;

			for (auto& move : moves) {
				bool valid = move.Do(facing, position, visited, map);
				if (!valid) return false;
			}
			return true;
		}

		std::string ToString() {
			std::string out = "";
			for (Move& move : moves) {
				auto s = move.ToString();
				if (!s.empty()) {
					out += s + ",";
				}
			}
			if (!out.empty()) out = out.substr(0, out.size() - 1);
			return out;
		}

		bool HasMove() {
			bool out = false;
			for (auto& m : moves) {
				out = out || m.IsMove();
			}
			return out;
		}
	};

	class MoveRoutine {
		std::vector<MoveFunction*> instructions;
		std::vector<MoveFunction> moveFunctions;
		long sindex = 0;
		int lastFailAt = -1;

	public:
		MoveRoutine(int maxLength) {
			moveFunctions = {
				MoveFunction('A', maxLength),
				MoveFunction('B', maxLength),
				MoveFunction('C', maxLength),
			};
			moveFunctions[0].Next();
			moveFunctions[1].Next();
			moveFunctions[2].Next();
		}

		bool Next() {
			bool done = false;
			if (HasMove()) {
				for (int i = instructions.size() - 1; i >= 0; i--) {
					auto& inst = instructions[i];
					if (lastFailAt >= 0 && i > lastFailAt) {
						inst = &moveFunctions[0];
						continue;
					}
					if (inst->name == 'A') {
						inst = &moveFunctions[1];
						done = true;
						break;
					}
					if (inst->name == 'B') {
						inst = &moveFunctions[2];
						done = true;
						break;
					}
					if (inst->name == 'C') {
						inst = &moveFunctions[0];
					}
				}


				if (sindex++ % 10000 == 0) std::cout << ToString() << std::endl << "SINDEX: " << sindex << std::endl;
				if (done) return false;

				if (instructions.size() < 11) {
					instructions.push_back(&moveFunctions[0]);
					return false;
				}
			}
			if (sindex++ % 10000 == 0) std::cout << ToString() << std::endl << "SINDEX: " << sindex << std::endl;

			instructions.clear();

			bool rolledOver = true;
			int i = 0;
			while (rolledOver && i < moveFunctions.size()) {
				rolledOver = moveFunctions[i].Next();
				i++;
			}
			return rolledOver;
		}

		std::string ToString() {
			std::string out = "";
			for (auto inst: instructions) {
				out += inst->name;
				out += ",";
			}
			if (!out.empty()) out = out.substr(0, out.size() - 1);
			out += "\n" + moveFunctions[0].ToString() + "\n";
			out += moveFunctions[1].ToString() + "\n";
			out += moveFunctions[2].ToString() + "\n";
			return out;
		}

		bool Do(int& facing, std::pair<int, int>& position, std::set<std::pair<int, int>>& visited, std::vector<std::vector<int>>& map) {
			lastFailAt = -1;
			for (auto& inst: instructions) {
				lastFailAt++;
				bool valid = inst->Do(facing, position, visited, map);
				if (!valid) return false;
			}
			lastFailAt = -1;
			return true;
		}

		bool HasMove() {
			bool out = false;
			for (auto& m : moveFunctions) {
				out = out || m.HasMove();
			}
			return out;
		}
		
	};

	int Part2_Fail() {
		std::shared_ptr<Part1IODriver> driver = std::make_shared<Part1IODriver>();
		{
			std::vector<NUM_TYPE> code = {
				1,330,331,332,109,3264,1102,1,1182,16,1101,1431,0,24,101,0,0,570,1006,570,36,1001,571,0,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1431,570,1006,570,14,21102,1,58,0,1105,1,786,1006,332,62,99,21102,1,333,1,21101,0,73,0,1105,1,579,1101,0,0,572,1102,0,1,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,101,0,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21102,340,1,1,1106,0,177,21102,477,1,1,1105,1,177,21101,514,0,1,21101,176,0,0,1105,1,579,99,21101,0,184,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1001,572,0,1182,21101,375,0,1,21102,1,211,0,1105,1,579,21101,1182,11,1,21101,0,222,0,1105,1,979,21101,0,388,1,21101,233,0,0,1105,1,579,21101,1182,22,1,21102,244,1,0,1105,1,979,21102,1,401,1,21101,0,255,0,1105,1,579,21101,1182,33,1,21101,0,266,0,1106,0,979,21101,0,414,1,21101,0,277,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21102,1,1182,1,21102,313,1,0,1105,1,622,1005,575,327,1102,1,1,575,21102,327,1,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,6,14,0,109,4,1201,-3,0,586,21002,0,1,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2105,1,0,109,5,2101,0,-4,630,20101,0,0,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21001,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,702,0,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,1,756,0,1106,0,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1105,1,622,21201,-3,1,-3,1106,0,640,109,-5,2105,1,0,109,7,1005,575,802,21001,576,0,-6,20101,0,577,-5,1105,1,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,47,-3,22201,-6,-3,-3,22101,1431,-3,-3,2101,0,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1105,1,924,1205,-2,873,21101,0,35,-4,1106,0,924,1202,-3,1,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1101,2,0,0,1202,-3,1,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,47,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,39,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21102,973,1,0,1105,1,786,99,109,-7,2105,1,0,109,6,21102,1,0,-4,21102,1,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21101,0,-4,-2,1105,1,1041,21102,-5,1,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1201,-2,0,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1202,-2,1,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21102,439,1,1,1106,0,1150,21102,477,1,1,1106,0,1150,21101,514,0,1,21101,0,1149,0,1105,1,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,2101,0,-4,0,109,-6,2106,0,0,28,7,40,1,5,1,40,1,5,1,40,1,5,1,22,1,5,13,5,1,22,1,5,1,17,1,22,1,3,5,15,1,22,1,3,1,1,1,1,1,15,1,22,1,1,9,13,1,22,1,1,1,1,1,1,1,1,1,1,1,13,1,16,7,1,1,1,9,11,1,16,1,7,1,3,1,1,1,1,1,1,1,11,1,12,13,3,5,1,1,11,5,8,1,3,1,13,1,3,1,15,1,8,1,3,1,1,13,3,1,15,1,8,1,3,1,17,1,15,1,8,1,3,1,17,7,5,9,4,1,3,1,23,1,5,1,3,1,3,1,4,5,23,1,5,1,3,1,3,1,32,1,5,1,3,1,3,1,32,1,5,5,3,1,32,1,13,1,32,1,13,1,32,1,13,1,32,1,3,5,5,1,32,1,3,1,3,1,5,1,32,1,3,1,3,1,5,1,32,1,3,1,3,1,5,1,32,9,5,5,32,1,13,1,32,1,13,1,32,1,13,1,26,7,13,1,26,1,19,1,26,1,7,13,26,1,7,1,38,1,7,1,38,1,7,1,38,9,12
			};
			computer::Computer computer(code, driver);
			computer.Run();
		}

		std::vector<std::vector<int>> map = ToMap(driver->stringMap);

		std::vector<std::string> arrowDirections = { "^", ">" , "v" "<" };
		int initialFacing = 0;
		std::pair<int, int> initialPos;

		for (auto dir : arrowDirections) {
			int pos = driver->stringMap.find(dir);
			if (pos != std::string::npos) {
				int x = pos % (map[0].size() + 1);
				int y = pos / (map[0].size() + 1);
				initialPos = std::make_pair(x, y);
				break;
			}
			initialFacing++;
		}

		int pcount = 0;
		for (auto& r : map) {
			for (int t : r) {
				if (t == 1) pcount++;
			}
		}
		

		for (size_t i = 1; i < 12; i++)
		{

			std::cout << i << std::endl;
			MoveRoutine routine(i);
			while (!routine.Next()) {
				std::set<std::pair<int, int>> visited;
				auto pos = initialPos;
				int facing = initialFacing;
				bool result = routine.Do(facing, pos, visited, map);
				if (result && visited.size() == pcount) {
					std::cout << routine.ToString() << std::endl;
					return 1;
				}
			}
				 
		}

		return 0;
	}

	class Part2IODriver : public computer::IODriver {
	public:
		std::string input;
		int index = 0;
		int lastOutput = 0;
		Part2IODriver(std::string input) : input(input) {};

		NUM_TYPE Read() {
			return input[index++];
		}

		void Write(NUM_TYPE output) {
			lastOutput = output;
		}


	};

	int Day17::Part2() {
		std::string input =
			"A,B,A,B,C,A,C,A,C,B\n" 
			"R,12,L,8,L,4,L,4\n" 
			"L,8,R,6,L,6\n" 
			"L,8,L,4,R,12,L,6,L,4\n" 
			"n\n";
		
		std::shared_ptr<Part2IODriver> driver = std::make_shared<Part2IODriver>(input);
		std::vector<NUM_TYPE> code = {
	1,330,331,332,109,3264,1102,1,1182,16,1101,1431,0,24,101,0,0,570,1006,570,36,1001,571,0,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1431,570,1006,570,14,21102,1,58,0,1105,1,786,1006,332,62,99,21102,1,333,1,21101,0,73,0,1105,1,579,1101,0,0,572,1102,0,1,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,101,0,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21102,340,1,1,1106,0,177,21102,477,1,1,1105,1,177,21101,514,0,1,21101,176,0,0,1105,1,579,99,21101,0,184,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1001,572,0,1182,21101,375,0,1,21102,1,211,0,1105,1,579,21101,1182,11,1,21101,0,222,0,1105,1,979,21101,0,388,1,21101,233,0,0,1105,1,579,21101,1182,22,1,21102,244,1,0,1105,1,979,21102,1,401,1,21101,0,255,0,1105,1,579,21101,1182,33,1,21101,0,266,0,1106,0,979,21101,0,414,1,21101,0,277,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21102,1,1182,1,21102,313,1,0,1105,1,622,1005,575,327,1102,1,1,575,21102,327,1,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,6,14,0,109,4,1201,-3,0,586,21002,0,1,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2105,1,0,109,5,2101,0,-4,630,20101,0,0,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21001,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,702,0,0,1106,0,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,1,756,0,1106,0,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1105,1,622,21201,-3,1,-3,1106,0,640,109,-5,2105,1,0,109,7,1005,575,802,21001,576,0,-6,20101,0,577,-5,1105,1,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,47,-3,22201,-6,-3,-3,22101,1431,-3,-3,2101,0,-3,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1105,1,924,1205,-2,873,21101,0,35,-4,1106,0,924,1202,-3,1,878,1008,0,1,570,1006,570,916,1001,374,1,374,1201,-3,0,895,1101,2,0,0,1202,-3,1,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20102,1,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,47,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,39,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21102,973,1,0,1105,1,786,99,109,-7,2105,1,0,109,6,21102,1,0,-4,21102,1,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21101,0,-4,-2,1105,1,1041,21102,-5,1,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1201,-2,0,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1202,-2,1,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1106,0,989,21102,439,1,1,1106,0,1150,21102,477,1,1,1106,0,1150,21101,514,0,1,21101,0,1149,0,1105,1,579,99,21102,1157,1,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,2101,0,-4,0,109,-6,2106,0,0,28,7,40,1,5,1,40,1,5,1,40,1,5,1,22,1,5,13,5,1,22,1,5,1,17,1,22,1,3,5,15,1,22,1,3,1,1,1,1,1,15,1,22,1,1,9,13,1,22,1,1,1,1,1,1,1,1,1,1,1,13,1,16,7,1,1,1,9,11,1,16,1,7,1,3,1,1,1,1,1,1,1,11,1,12,13,3,5,1,1,11,5,8,1,3,1,13,1,3,1,15,1,8,1,3,1,1,13,3,1,15,1,8,1,3,1,17,1,15,1,8,1,3,1,17,7,5,9,4,1,3,1,23,1,5,1,3,1,3,1,4,5,23,1,5,1,3,1,3,1,32,1,5,1,3,1,3,1,32,1,5,5,3,1,32,1,13,1,32,1,13,1,32,1,13,1,32,1,3,5,5,1,32,1,3,1,3,1,5,1,32,1,3,1,3,1,5,1,32,1,3,1,3,1,5,1,32,9,5,5,32,1,13,1,32,1,13,1,32,1,13,1,26,7,13,1,26,1,19,1,26,1,7,13,26,1,7,1,38,1,7,1,38,1,7,1,38,9,12
		};
		code[0] = 2;
		computer::Computer computer(code, driver);
		computer.Run();

		return driver->lastOutput;
	}
}


